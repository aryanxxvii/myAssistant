'''
MASTER-MIND GAME

RULES:

- consists of 2 parts:

 - code-maker (CPU)
   creates a 4-digit code from the digits 1-8.
   
 - code-breaker (HI)
   has to guess the code.
   clues will be provided after each guess.

- hints:

 - If a digit of the guessed code exists in main code,
   'W' will be printed.
 - If 'W' is satisfied, and the position matches as well,
   'B' will be printed.

- game:

 - player will get 10 chances.
'''

# SET-UP #=============================================================

hidden = ['*','*','*','*']
empty = ['O','O','O','O']
linebreak = '[                  ]'
board = []

# MODULES #============================================================

import random
import os
import time

# FUNCTIONS #==========================================================

def gamerules(): # ------------------------------------------------------
    # prints the rules of the game.

    print("===================RULES=======================================================")
    print("")
    print("You have to crack the hidden code generated by the computer.")
    print("You will get 10 chances in total.")
    print("After every turn, you will be given clues, i.e 'W' and 'B'.")
    print("W : Your code has a digit that exists in the hidden code.")
    print("B : Your code has a digit that exists in the hidden code as")
    print("    well as its position matches the postion in the hidden code.")
    print("Let's get started.")
    print("")
    print("===============================================================================")
    print("")

def makecode(): # --------------------------------------------------------
    # a part of the game.
    # creates the code.

    global board
    board = []
    
    global code
    x = ['1', '2', '3', '4', '5', '6', '7', '8']
    random.shuffle(x)
    code = x[0:4]

def userguess(): # --------------------------------------------------------
    # a part of the game, returns the user guess
    # user guesses the code. The input of the user is checked to match the game format.

    print("")
    print("============GUESS===========")
    print("")

    # this loop handles the error.
    while True:

        try:
            x = int(input("Enter code:"))
            y = list(str(x))
            assert '0' not in y and '9' not in y and len(y) == 4
            break

        except:
            
            print("Please enter a code consisting of 4 digits:")
            print("'1', '2', '3', '4', '5', '6', '7', '8'")
            print("")

    return y

def giveclue(x): # ------------------------------------------------
    # it checks the user's guess to match with the generated code.

    global code

    c = []

    # this loop gives the neccesary clues to user. A part of the game.
    for i in x:

        if i in code:

            if x.index(i) == code.index(i):
                c.append('B')
            else:
                c.append('W')

        else:
            c.append('-')

    random.shuffle(c)
    C = ''.join(c)

    return C

def displayboard(turns): # ------------------------------------------------
    # this function is managing the visuals of the game.
    # prints the game board, where the user places his plays.

    print("============CODE============")
    print("")
    print(hidden)
    print("")
    print("============TRIES===========")
    print("")
    
    print(linebreak)
    for i in range(turns):
        print(empty)
        print(linebreak)
    for i in board[::-1]:
        print(i)
        print(linebreak)

# GAME #===============================================================

def start(): # ----------------------------------------------------
    # actual function implemented in game.
    # returns True when user wins, else false.

    global hidden
    global linebreak
    global code

    turns = 10
    clue = []

    makecode() #code is generated
    print("Generating code...")
    time.sleep(2)
    os.system('cls')

    # Player's turns

    gamerules()
    displayboard(turns)

    while turns > 0: # limiting the number of turns the user has.

        if clue == "BBBB": # checks the winning condition.
            print("You WIN.")

            return True
            break
        
        guess = userguess() # user play
        
        clue = giveclue(guess) # give clue
        entry = str(guess) + "   CLUE: " + clue
        board.append(entry)

        turns -= 1

        time.sleep(0.5); os.system('cls')

        gamerules()
        displayboard(turns)

    if turns == 0: # checks the losing condition
        print("You LOSE.")
        return False

    
    print(code)
    
    print("Your guess")
    print(guess)
